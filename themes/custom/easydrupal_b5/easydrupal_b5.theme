<?php

/**
 * @file
 * easyDrupal B5 theme file.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_html().
 */
function easydrupal_b5_preprocess_html(&$variables): void {
  // Page specific info.
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', ltrim($path, '/'));
  if (isset($path_args[0])
    && isset($path_args[1])
    && ($path_args[0] == 'node')
    && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0])
    && isset($path_args[1])
    && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }
  if (isset($path_args[0])
    && isset($path_args[1])
    && isset($path_args[2]) &&
    $path_args[0] == 'taxonomy' && $path_args[1] == 'term') {
    $variables['attributes']['class'][] = 'page-taxonomy-term-' . $path_args[2];
    $term = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($path_args[2]);
    if (!empty($term)) {
      $vocabulary_id = $term->bundle();
      $variables['attributes']['class'][] = 'page-vocabulary-' . Html::cleanCssIdentifier($vocabulary_id);
    }
  }
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id) {
    $variables['attributes']['class'][] = 'page-view-' . Html::cleanCssIdentifier($view_id);
  }

  // Add node alias as a class.
  $path_alias = \Drupal::service('path_alias.manager')
    ->getAliasByPath($path);
  $variables['attributes']['class'][] = 'alias-' . Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements template_preprocess_page().
 */
function easydrupal_b5_preprocess_page(&$variables): void {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['#attached']['library'][] = 'easydrupal_b5/landing-page';
  }

  if (isset($variables['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $variables['node'];

    // Expose Content type to page template.
    $variables['content_type'] = $node->getType();

    // Check a content type.
    switch ($node->getType()) {
      case 'article':
        $variables['#attached']['library'][] = 'easydrupal_b5/node-type-article';
        $variables['#attached']['library'][] = 'easydrupal_b5/geshifilter';
        $variables['#attached']['library'][] = 'easydrupal_b5/view-about-author';

        break;

      case 'page':
        $variables['#attached']['library'][] = 'easydrupal_b5/node-type-page';

        break;

      case 'project':
        $variables['#attached']['library'][] = 'easydrupal_b5/node-type-project';

        break;
    }
  }
}

/**
 * Implements hook_theme().
 */
function easydrupal_b5_theme($existing, $type, $theme, $path): array {
  return [
    'contact_message_feedback_contact_form_form' => [
      'render element' => 'form',
      'path' => '/themes/custom/easydrupal_b5/templates/form',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function easydrupal_b5_form_contact_message_feedback_contact_form_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  // Checking a field type because it is markup for logged user,
  // and we want a placeholder.
  if (isset($form['name']) && $form['name']['#type'] == 'textfield') {
    $form['name']['#attributes']['placeholder'][] = $form['name']['#title'] . ' *';
    unset($form['name']['#title']);
  }

  if (isset($form['mail']) && $form['mail']['#type'] == 'email') {
    $form['mail']['#attributes']['placeholder'][] = t('Your email') . ' *';
    unset($form['mail']['#title']);
  }

  if (isset($form['subject']['widget'])) {
    $form['subject']['widget'][0]['value']['#attributes']['placeholder'][] = $form['subject']['widget'][0]['#title'] . ' *';
    unset($form['subject']['widget'][0]['value']['#title']);
  }

  if (isset($form['message']['widget'])) {
    $form['message']['widget'][0]['value']['#attributes']['placeholder'][] = t('Message') . ' *';
    unset($form['message']['widget'][0]['value']['#title']);
  }

}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function easydrupal_b5_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $form['name']['#attributes']['placeholder'][] = $form['name']['#title'] . ' *';
  unset($form['name']['#title'], $form['name']['#description']);

  $form['pass']['#attributes']['placeholder'][] = $form['pass']['#title'] . ' *';
  unset($form['pass']['#title'], $form['pass']['#description']);
}
